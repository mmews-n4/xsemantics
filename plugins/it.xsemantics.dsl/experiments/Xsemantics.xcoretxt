/*******************************************************************************
 * Copyright (c) 2013-2017 Lorenzo Bettini.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Lorenzo Bettini - Initial contribution and API
 *******************************************************************************/

@Ecore(nsURI="http://www.xsemantics.it/dsl/Xsemantics")
@GenModel(modelDirectory="/it.xsemantics.dsl/emf-gen", 
	forceOverwrite="true", 
	updateClasspath="false",
	complianceLevel="5.0", // when generating from mwe2 this is crucial
	operationReflection="false" // http://www.eclipse.org/forums/index.php/mv/msg/649098/1246741/#msg_1246741
)
package it.xsemantics.dsl.xsemantics

import org.eclipse.xtext.common.types.JvmFormalParameter
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference
import org.eclipse.xtext.common.types.JvmTypeReference
import org.eclipse.xtext.xbase.XExpression
import org.eclipse.xtext.xtype.XImportSection

class XsemanticsFile {
	contains XImportSection importSection
	contains XsemanticsSystem xsemanticsSystem
}

class XsemanticsSystem {
	String name
	contains JvmParameterizedTypeReference superSystem
	contains JvmParameterizedTypeReference validatorExtends
	contains XImportSection importSection
	contains Injected[] injections
	contains AuxiliaryDescription[] auxiliaryDescriptions
	contains JudgmentDescription[] judgmentDescriptions
	contains AuxiliaryFunction[] auxiliaryFunctions
	contains Rule[] rules
	contains CheckRule[] checkrules
}

class Injected extends UniqueByName {
	boolean ^extension
	contains JvmTypeReference ^type
	String name
}

class AuxiliaryDescription extends Description {
	String name
	contains JvmFormalParameter[] parameters
	contains JvmTypeReference ^type
}

class JudgmentDescription extends Description {
	String name
	String judgmentSymbol
	contains JudgmentParameter[] judgmentParameters
	String[] relationSymbols
}

class JudgmentParameter {
}

class AuxiliaryFunction extends Named {
	String name
	contains JvmFormalParameter[] parameters
	contains XExpression body
	refers transient unsettable AuxiliaryDescription _auxiliaryDescription
}

class Rule extends Overrider , ReferToJudgment {
	String name
	contains RuleConclusion conclusion
	op String getJudgmentSymbol() {
		return conclusion.judgmentSymbol
	}
	op unique String[] getRelationSymbols() {
		return conclusion.relationSymbols
	}
	refers transient unsettable RuleParameter[] _inputParams
	refers transient unsettable RuleParameter[] _outputParams
}

class Axiom extends Rule {
}

class RuleWithPremises extends Rule {
	contains XExpression premises
}

class CheckRule extends Overrider {
	String name
	contains RuleParameter element
	contains XExpression premises
}

class RuleConclusion {
	contains Environment environment
	String judgmentSymbol
	contains RuleConclusionElement[] conclusionElements
	String[] relationSymbols
	contains XExpression error
}

class RuleInvocation extends XExpression , ReferToJudgment {
	contains XExpression environment
	String judgmentSymbol
	contains XExpression[] expressions
	String[] relationSymbols
}

class Environment {
	String name
}

class RuleConclusionElement {
}

class RuleParameter extends RuleConclusionElement {
	contains JvmFormalParameter parameter
}

class ExpressionInConclusion extends RuleConclusionElement {
	contains XExpression expression
}

class OutputParameter extends JudgmentParameter {
	contains JvmTypeReference jvmTypeReference
}

class InputParameter extends JudgmentParameter , UniqueByName {
	contains JvmFormalParameter parameter
	op String getName() {
		return parameter.name
	}
}

class OrExpression extends XExpression {
	contains XExpression[] branches
}

class Fail extends XExpression {
	contains XExpression error
}

class EnvironmentComposition extends XExpression {
	contains XExpression currentEnvironment
	contains XExpression subEnvironment
}

class EnvironmentMapping extends XExpression {
	contains XExpression key
	contains XExpression value
}

class EmptyEnvironment extends XExpression {
}

class ErrorSpecification extends XExpression {
	contains XExpression error
	contains XExpression source
	contains XExpression feature
	contains XExpression data
}

interface UniqueByName extends Named {
}

class Overrider extends UniqueByName {
	boolean override
}

class ReferToJudgment {
	refers transient unsettable JudgmentDescription _judgment
	op String getJudgmentSymbol()
	op unique String[] getRelationSymbols()
}

interface Named {
	op String getName()
}

class CachedClause {
	EntryPointsOption entryPointsOption
	contains XExpression condition
}

class Cachable extends UniqueByName {
	contains CachedClause cachedClause
}

class Description extends Overrider, Cachable {
	contains XExpression error
}

enum EntryPointsOption {
	Default
	None
}
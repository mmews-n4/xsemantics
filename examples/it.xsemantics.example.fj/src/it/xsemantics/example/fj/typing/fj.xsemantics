/*******************************************************************************
 * Copyright (c) 2013-2017 Lorenzo Bettini.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Lorenzo Bettini - Initial contribution and API
 *******************************************************************************/

import com.google.common.collect.Iterables
import com.google.common.collect.Lists
import it.xsemantics.example.fj.fj.BasicType
import it.xsemantics.example.fj.fj.BoolConstant
import it.xsemantics.example.fj.fj.Cast
import it.xsemantics.example.fj.fj.Class
import it.xsemantics.example.fj.fj.ClassType
import it.xsemantics.example.fj.fj.Constant
import it.xsemantics.example.fj.fj.Expression
import it.xsemantics.example.fj.fj.Field
import it.xsemantics.example.fj.fj.FjFactory
import it.xsemantics.example.fj.fj.FjPackage
import it.xsemantics.example.fj.fj.IntConstant
import it.xsemantics.example.fj.fj.Method
import it.xsemantics.example.fj.fj.MethodBody
import it.xsemantics.example.fj.fj.New
import it.xsemantics.example.fj.fj.ParamRef
import it.xsemantics.example.fj.fj.Parameter
import it.xsemantics.example.fj.fj.Program
import it.xsemantics.example.fj.fj.Selection
import it.xsemantics.example.fj.fj.StringConstant
import it.xsemantics.example.fj.fj.This
import it.xsemantics.example.fj.fj.Type
import it.xsemantics.example.fj.fj.TypedElement
import it.xsemantics.example.fj.util.FjTypeUtils
import java.util.ArrayList
import java.util.List
import org.eclipse.xtext.EcoreUtil2

/*
 * A version of the FJ system where type computation involves also
 * type checking.
 */
system it.xsemantics.example.fj.typing.FjTypeSystem

copyright
"/*******************************************************************************
 * Copyright (c) 2013-2017 Lorenzo Bettini.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Lorenzo Bettini - Initial contribution and API
 *******************************************************************************/"


inject FjTypeUtils fjTypeUtils

auxiliary {
	superclasses(Class cl) : List<Class>
	fields(Class cl) : List<Field>
	methods(Class cl) : List<Method>
	overrides(Method current, Method previous) 
		error current.name + " does not override the superclass method"
		source current
	isValue(Expression e) : Boolean
	/* replaces in a copy of the body's expression:
	 * 'this' with thisReplacement and
	 * param references with args */ 
	replaceThisAndParams(MethodBody body,
			Expression thisReplacement, 
			List<Parameter> params, List<Expression> args
		) : MethodBody
}

judgments {
	type |- Expression expression : output Type
		error "cannot type " + stringRep(expression)
		source expression
	classtype |~ Expression expression : output ClassType
		error stringRep(expression) + " has not a class type"
		source expression
	subtype |- Type left <: Type right
		error stringRep(left) + " is not a subtype of " + stringRep(right)
	assignable |- Expression expression |> Type target
		error stringRep(expression) + " is not assignable for " + stringRep(target)
		source expression
	equalstype |- Type left ~~ Type right
		error stringRep(left) + " is not the same type as " + stringRep(right)
	subtypesequence |- Expression owner ~> List<Expression> expressions << List<? extends TypedElement> elements
		error "invalid arguments for expected parameters"
		source owner
	reduce |- Expression exp ~> output Expression
	subjred |= Expression exp ~> output Expression : output Type <: output Type
}

auxiliary superclasses(Class cl) {
	getAll(cl,
		FjPackage::eINSTANCE.class_Superclass,
		FjPackage::eINSTANCE.class_Superclass,
		typeof(Class)
	)
}

auxiliary fields(Class clazz) {
	var Iterable<Field> fields = new ArrayList<Field>
	
	// inherited fields must come first
	for (superclass : superclasses(clazz)) {
		fields = 
			(EcoreUtil2::typeSelect(superclass.members, typeof(Field)) 
				+ fields)
	}
	fields = fields + EcoreUtil2::typeSelect(clazz.members, typeof(Field))
	Lists::newArrayList(fields)
}

auxiliary methods(Class clazz) {
	val methods = EcoreUtil2::typeSelect(clazz.members, typeof(Method))
	superclasses(clazz).forEach [ 
		c | 
		methods.addAll(EcoreUtil2::typeSelect(c.members, typeof(Method)))
	]
	methods
}

auxiliary overrides(Method current, Method previous) {
	current.name != previous.name
	or
	{
		empty |- current.type ~~ previous.type
		or
		fail error 
		"cannot change return type of inherited method: " +
			stringRep(previous.type)
		source current
		feature FjPackage::eINSTANCE.typedElement_Type
		
		current.params.size == previous.params.size
		val previousParamsIt = previous.params.iterator
		for (param : current.params) {
			empty |- param.type ~~ previousParamsIt.next.type
		}
	}
}

auxiliary isValue(Expression e) { false }
auxiliary isValue(Constant exp) { true }
auxiliary isValue(New exp) { 
	exp.args.forall[isValue(it)]
}

auxiliary replaceThisAndParams(MethodBody body, Expression thisReplacement, List<Parameter> params, List<Expression> args) {
	clone(body) => [
		EcoreUtil2::eAllOfType(it, typeof(This)).forEach [
			EcoreUtil2::replace(eContainer,
				eContainingFeature,
				it,
				clone(thisReplacement)
			)
		]
		EcoreUtil2::eAllOfType(it, typeof(ParamRef)).forEach [
			val paramIndex = params.indexOf(it.parameter)
			EcoreUtil2::replace(eContainer,
				eContainingFeature,
				it,
				clone(args.get(paramIndex))
			)
		]
	]
}

axiom TThis
	G |- This _this : env(G, 'this', ClassType)

rule TNew
	G |- New newExp : newExp.type
from {
	var fields = fields(newExp.type.classref)
	// we want the superclasses' fields first
	G |- newExp ~> newExp.args << fields
}

axiom TParamRef 
	G |- ParamRef paramref : paramref.parameter.type

// you can manually create the BasicType with EMF FjFactory...
axiom TStringConstant
	G |- StringConstant s : { 
			val result = FjFactory::eINSTANCE.createBasicType();
			result.basic = 'String'
			result
		}

// ...or use an utility class...
axiom TIntConstant
	G |- IntConstant i : fjTypeUtils.createIntType

// ...or closures
axiom TBoolConstant
	G |- BoolConstant b : 
	[ 
	    BasicType t |
		t.basic='boolean'
		t
	].apply(FjFactory::eINSTANCE.createBasicType())

rule TSelection
	G |- Selection selection : selection.message.type
from {
	G |- selection.receiver : var ClassType receiverType
	// check message if it's a method call
	val message = selection.message
	switch (message) {
		Method: { 
			G |- selection ~> selection.args << message.params
		}
	}
}

rule TCast
	G |- Cast cast : cast.type
from {
	G |- cast.expression : var Type expType
	
	G |- cast.type <: expType
	or
	G |- expType <: cast.type
}

rule TExpressionClassType
	G |~ Expression expression : ClassType classType
from {
	G |- expression : classType
}

rule GeneralSubtyping
	G |- Type left <: Type right
		error "types " + stringRep(left) + " and " + stringRep(right) +
			" are not comparable"
from {
	// if we get here we're trying to mix
	// a BasicType with a ClassType, thus, we fail
	fail
}

rule BasicSubtyping
	derives G |- BasicType left <: BasicType right
from {
	left.basic.equals(right.basic)
}

rule ClassSubtyping
	derives G |- ClassType left <: ClassType right
from {
	left.classref == right.classref
	or
	right.classref.name == "Object"
	or {
		superclasses(left.classref).contains(right.classref)
	}
}

rule ExpressionAssignableToType
	G |- Expression expression |> Type target
from {
	var Type expressionType
	G |- expression : expressionType
	G |- expressionType <: target
}

rule GeneralEquals
	G |- Type left ~~ Type right
		error "types " + stringRep(left) + " and " + stringRep(right) +
			" are not comparable"
from {
	// if we get here we're trying to mix
	// a BasicType with a ClassType, thus, we fail
	fail
}

rule BasicEquals
	derives G |- BasicType left ~~ BasicType right
from {
	left.basic.equals(right.basic)
}

rule ClassEquals
	derives G |- ClassType left ~~ ClassType right
from {
	left.classref == right.classref
}

rule SubtypeSequence derives
	G |- Expression owner ~> 
		List<Expression> expressions << List<TypedElement> typedElements
from {
	expressions.size == typedElements.size
	or
	fail
		error "expected " + typedElements.size + " arguments, but got " +
			expressions.size
		source owner 
	
	val typedElementsIterator = typedElements.iterator
	for (exp : expressions) {
		G |- exp |> typedElementsIterator.next.type
	}
}

rule RNew
	G |- New exp ~> New exp1
from {
	exp1 = clone(exp)
	val indexOfNextToReduce = Iterables::indexOf(exp1.args) [
		!isValue(it)
	]
	{
		// all constructor's arguments are values
		indexOfNextToReduce < 0
	}
	or
	{
		// we need to evaluate an argument
		val nextToReduce = exp1.args.get(indexOfNextToReduce)
		G |- nextToReduce ~> var Expression expi
		exp1.args.set(indexOfNextToReduce, expi)
	}
}

rule RSelection
	G |- Selection exp ~> Expression exp1
from {
	{
		// the receiver is not a value yet
		val sel = clone(exp)
		!isValue(exp.receiver)
		G |- exp.receiver ~> var Expression expi
		sel.receiver = expi
		exp1 = sel
	}
	or
	{
		val receiver = exp.receiver as New
		val message = exp.message
		switch (message) {
			Field: {
				// find the value's field corresponding
				// to the requested field
				val fieldIndex = 
					Iterables::indexOf(fields(receiver.type.classref))
				[
					name == message.name
				]
				exp1 = receiver.args.get(fieldIndex)
			}
			Method: {
				val indexOfNextToReduce = Iterables::indexOf(exp.args) [
					!isValue(it)
				]
				{
					// all invocation's arguments are values
					indexOfNextToReduce < 0
					val method = exp.message as Method
					exp1 = replaceThisAndParams(
						method.body, receiver,
						method.params, exp.args).expression
				}
				or
				{
					// we need to evaluate an argument
					val sel = clone(exp)
					val nextToReduce = sel.args.get(indexOfNextToReduce)
					G |- nextToReduce ~> var Expression argi
					sel.args.set(indexOfNextToReduce, argi)
					exp1 = sel
				}
			}
		}
	}
}

rule RCast
	G |- Cast exp ~> Expression exp1
from {
	val cast = clone(exp)
	if (isValue(cast.expression)) {
		G |- cast.expression |> cast.type
		exp1 = cast.expression
	} else {
		G |- cast.expression ~> var Expression expi
		cast.expression = expi
		exp1 = cast
	}
}

rule SubjRed
	G |= Expression e ~> Expression e1 : Type T1 <: Type T
from {
	G |- e : T
	G |- e ~> e1
	G |- e1 : T1
	G |- T1 <: T
}

// checkrules (for the generated validator)

checkrule CheckMethodBody for
	Method method
from {
	val typeForThis = fjTypeUtils.createClassType(
		EcoreUtil2::getContainerOfType(method, typeof(Class))
	)
	'this' <- typeForThis |- method.body.expression |> method.type
}

checkrule CheckField for
	Field field
from {
	val clazz = field.eContainer as Class
	
	if (clazz.superclass !== null) {
		var inheritedFields = fields(clazz.superclass)
		// make sure no duplicate fields in the hierarchy
		inheritedFields.forEach [
			inheritedField |
			if (field.name == inheritedField.name) {
				fail
					error "field already defined in superclass " +
						stringRep(inheritedField.eContainer)
			}
		]
	}
}

checkrule CheckMethodOverride for
	Method method
from {
	val clazz = method.eContainer as Class
	
	if (clazz.superclass !== null) {
		var inheritedMethods = methods(clazz.superclass)
		val methods = EcoreUtil2::typeSelect(clazz.members, typeof(Method))
		// check override predicate
		inheritedMethods.forEach [
			inheritedMethod |
			methods.forEach [
				overrides(it, inheritedMethod)
			]
		]
	}
}

checkrule CheckClassHierachyNotCyclic for
	Class cl
from {
	if (cl.superclass !== null) {
		!superclasses(cl).contains(cl)
		or
		fail
			error "Cyclic hierarchy for " + cl.name
			source cl
	}
}

checkrule CheckMain for
	Program program
from {
	program.main === null // nothing to check
	or
	empty |- program.main : var Type mainType
}

/*******************************************************************************
 * Copyright (c) 2013-2017 Lorenzo Bettini.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Lorenzo Bettini - Initial contribution and API
 *******************************************************************************/

import it.xsemantics.example.lambda.lambda.Abstraction
import it.xsemantics.example.lambda.lambda.Application
import it.xsemantics.example.lambda.lambda.Arithmetics
import it.xsemantics.example.lambda.lambda.ArrowType
import it.xsemantics.example.lambda.lambda.BasicType
import it.xsemantics.example.lambda.lambda.IntConstant
import it.xsemantics.example.lambda.lambda.IntType
import it.xsemantics.example.lambda.lambda.Parameter
import it.xsemantics.example.lambda.lambda.Program
import it.xsemantics.example.lambda.lambda.StringConstant
import it.xsemantics.example.lambda.lambda.StringType
import it.xsemantics.example.lambda.lambda.Term
import it.xsemantics.example.lambda.lambda.Type
import it.xsemantics.example.lambda.lambda.TypeVariable
import it.xsemantics.example.lambda.lambda.Variable
import it.xsemantics.example.lambda.validation.AbstractLambdaJavaValidator
import org.eclipse.emf.ecore.util.EcoreUtil

system it.xsemantics.example.lambda.xsemantics.LambdaXsemanticsSystem

copyright
"Copyright (c) 2013-2017 Lorenzo Bettini.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
  Lorenzo Bettini - Initial contribution and API"


validatorExtends AbstractLambdaJavaValidator

inject LambdaUtils lambdaUtils

auxiliary {
	notoccur(Type type, Type other)
		error stringRep(type) + " occurs in " + stringRep(other)
	typesubstitution(TypeSubstitutions substitutions, Type original) : Type
	unify(TypeSubstitutions substitutions, 
			Type left, Type right) : Type
		error "cannot unify " + stringRep(left) + 
			" with " + stringRep(right)
}

judgments {
	type |- TypeSubstitutions substitutions |> Term term : output Type
	paramtype |~ Parameter param : output Type
}

auxiliary notoccur(Type type, Type other) { true }

auxiliary notoccur(TypeVariable variable, TypeVariable other)
{
	variable.typevarName != other.typevarName
}

auxiliary notoccur(TypeVariable variable, ArrowType arrowType)
{
	notoccur(variable, arrowType.left)
	notoccur(variable, arrowType.right)
}

auxiliary typesubstitution(TypeSubstitutions substitutions, Type type)
{
	type
}

auxiliary typesubstitution(TypeSubstitutions substitutions, TypeVariable variable)
{
	var mapped = substitutions.mapped(variable.typevarName)
	if (mapped !== null) {
		val result = EcoreUtil.copy(mapped)
		typesubstitution(substitutions, result) // recursive
	} else
		variable
}

auxiliary typesubstitution(TypeSubstitutions substitutions, ArrowType arrowType)
{
	var Type subResult
	val result = EcoreUtil.copy(arrowType)
	subResult = typesubstitution(substitutions, arrowType.left)
	result.left = subResult
	subResult = typesubstitution(substitutions, arrowType.right)
	result.right = subResult
	result
}

auxiliary unify(TypeSubstitutions substitutions, Type t1, Type t2) {
	// if we get here we cannot unify the two types
	fail
	null
} 

auxiliary unify(TypeSubstitutions substitutions, StringType t1, StringType t2) 
{
	EcoreUtil.copy(t1)
}

auxiliary unify(TypeSubstitutions substitutions, IntType t1, IntType t2)
{
	EcoreUtil.copy(t1)
}

auxiliary unify(TypeSubstitutions substitutions, TypeVariable typeVar, BasicType basicType)
{
	substitutions.add(typeVar.typevarName, basicType)
	EcoreUtil.copy(basicType)
}

auxiliary unify(TypeSubstitutions substitutions, BasicType basicType, TypeVariable typeVar)
{
	unify(substitutions, typeVar, basicType)
}

auxiliary unify(TypeSubstitutions substitutions, TypeVariable left, TypeVariable right)
{
	// unify both variables with a fresh new variable
	val fresh = lambdaUtils.createFreshTypeVariable
	substitutions.add(left.typevarName, fresh)
	substitutions.add(right.typevarName, fresh)
	fresh
}

auxiliary unify(TypeSubstitutions substitutions, TypeVariable v, ArrowType arrow)
{
	// occur check
	notoccur(v, arrow)
	substitutions.add(v.typevarName, arrow)
	EcoreUtil.copy(arrow)
}

auxiliary unify(TypeSubstitutions substitutions, ArrowType arrow, TypeVariable v)
{
	unify(substitutions, v, arrow)
}

auxiliary unify(TypeSubstitutions substitutions, ArrowType arrow1, ArrowType arrow2)
{
	val newArrow1 = EcoreUtil.copy(arrow1)
	val newArrow2 = EcoreUtil.copy(arrow2)
	var result = unify(substitutions, arrow1.left, arrow2.left)
	newArrow1.left = EcoreUtil.copy(result)
	newArrow2.left = EcoreUtil.copy(result)
	result = unify(substitutions, arrow1.right, arrow2.right)
	newArrow1.right = EcoreUtil.copy(result)
	newArrow2.right = EcoreUtil.copy(result)
	newArrow1
}

rule ParameterType
	G |~ Parameter param : Type type
from {
	{
		param.type !== null
		type = EcoreUtil.copy(param.type)
	}
	or
	type = lambdaUtils.createFreshTypeVariable
}

axiom StringConstantType
	G |- TypeSubstitutions substitutions |> 
		StringConstant stringConstant : lambdaUtils.createStringType

axiom IntConstantType
	G |- TypeSubstitutions substitutions |> 
		IntConstant intConstant : lambdaUtils.createIntType

rule VariableType
	G |- TypeSubstitutions substitutions |> 
		Variable variable : Type type
from {
	type = typesubstitution(substitutions, 
		EcoreUtil.copy(env(G, variable.ref, Type)))
}

rule ArithmeticsType
	G |- TypeSubstitutions substitutions |> 
		Arithmetics arithmetics : IntType intType
from {
	intType = lambdaUtils.createIntType
	G |- substitutions |> arithmetics.term : var Type termType
	// the term type must be unifiable with int type
	unify(substitutions, termType, intType)
}

rule AbstractionType
	G |- TypeSubstitutions substitutions |> Abstraction abstraction : ArrowType type
from {
	G |~ abstraction.param : var Type paramType
	G, abstraction.param <- paramType |- 
		substitutions |> abstraction.term : var Type termType
	paramType = typesubstitution(substitutions, paramType)
	termType = typesubstitution(substitutions, termType)
	type = lambdaUtils.createArrowType(paramType, termType)
}

rule ApplicationType
	G |- TypeSubstitutions substitutions |> Application application : Type type
from {
	G |- substitutions |> application.fun : var Type funType
	
	// make sure funType can be unified ArrowType
	var arrowType = lambdaUtils.createFreshArrowType
	arrowType = unify(substitutions, funType, arrowType) as ArrowType
	
	G |- substitutions |> application.arg : var Type argType
	
	// unify arrow left with the type of the argument
	unify(substitutions, arrowType.left, argType)
	
	// the result is the arrow right after substitutions
	type = typesubstitution(substitutions, arrowType.right)
}

checkrule CheckProgram for
	Program program
from {
	lambdaUtils.resetCounter
	// if we can type the program term
	empty |- new TypeSubstitutions() |> program.term : var Type type
}
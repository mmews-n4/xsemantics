/*******************************************************************************
 * Copyright (c) 2013-2017 Lorenzo Bettini.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Lorenzo Bettini - Initial contribution and API
 *******************************************************************************/

import it.xsemantics.example.fj.fj.BasicType
import it.xsemantics.example.fj.fj.BoolConstant
import it.xsemantics.example.fj.fj.Cast
import it.xsemantics.example.fj.fj.Class
import it.xsemantics.example.fj.fj.ClassType
import it.xsemantics.example.fj.fj.Constant
import it.xsemantics.example.fj.fj.Expression
import it.xsemantics.example.fj.fj.Field
import it.xsemantics.example.fj.fj.FjFactory
import it.xsemantics.example.fj.fj.FjPackage
import it.xsemantics.example.fj.fj.IntConstant
import it.xsemantics.example.fj.fj.Method
import it.xsemantics.example.fj.fj.New
import it.xsemantics.example.fj.fj.ParamRef
import it.xsemantics.example.fj.fj.Program
import it.xsemantics.example.fj.fj.Selection
import it.xsemantics.example.fj.fj.StringConstant
import it.xsemantics.example.fj.fj.This
import it.xsemantics.example.fj.fj.Type
import it.xsemantics.example.fj.fj.TypedElement
import it.xsemantics.example.fj.util.FjTypeUtils
import it.xsemantics.example.fj.validation.AbstractFJJavaValidator
import java.util.Collections
import java.util.LinkedList
import java.util.List
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.EcoreUtil2

system it.xsemantics.test.fj.first.FjFirstTypeSystem

copyright
"/*******************************************************************************
 * Copyright (c) 2013-2017 Lorenzo Bettini.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Lorenzo Bettini - Initial contribution and API
 *******************************************************************************/"


validatorExtends AbstractFJJavaValidator

inject FjTypeUtils fjTypeUtils

auxiliary {
	superclasses(Class cl) : List<Class>
}

judgments {
	type |- Expression expression : output Type
	classtype ||~ Expression expression : output ClassType
	typedecl ||- TypedElement element : output Type
	subtype |- Type left <: Type right
	equalstype |- Type left ~~ Type right
	subtypesequence |- Expression owner : List<Expression> expressions << List<? extends TypedElement> elements
	subclass |- Class candidate <| Class superclass
	fields ||- Class cl >> output List<Field>
	methods ||~ Class cl >> output List<Method>
	check |- EObject obj
}

auxiliary superclasses(Class cl) {
	getAll(cl,
		FjPackage::eINSTANCE.class_Superclass,
		FjPackage::eINSTANCE.class_Superclass,
		typeof(Class)
	)
}

axiom TTypedElement
	G ||- TypedElement typedElement : typedElement.type

axiom TThis
	G |- This _this : env(G, 'this', ClassType)

axiom TNew
	G |- New newExp : newExp.type

rule TParamRef derives
	G |- ParamRef paramref : Type type
from {
	G ||- paramref.parameter : type
}

// you can manually create the BasicType with EMF FjFactory...
axiom TStringConstant
	G |- StringConstant s : { 
			val result = FjFactory::eINSTANCE.createBasicType();
			result.basic = 'String'
			result
		}

// ...or use static utility methods...
axiom TIntConstant
	G |- IntConstant i : fjTypeUtils.createIntType

// ...or closures
axiom TBoolConstant
	G |- BoolConstant b : 
	[ 
		BasicType t |
		t.basic='boolean'
		t
	].apply(FjFactory::eINSTANCE.createBasicType())

rule TSelection derives
	G |- Selection selection : Type type
from {
	G ||- selection.message : type
}
// more direct alternative
//axiom TSelection
//	G |- Selection selection : selection.message.type

axiom TCast
	G |- Cast cast : cast.type

rule TExpressionClassType
	G ||~ Expression expression : ClassType classType
from {
	G |- expression : classType
}

rule BasicSubtyping
	derives G |- BasicType left <: BasicType right
from {
	left.basic.equals(right.basic)
}

rule ClassSubtyping
	derives G |- ClassType left <: ClassType right
from {
	G |- left.classref <| right.classref
}

rule Subclassing
	derives G |- Class class1 <| Class class2
from {
	class1 == class2
	or
	// every class is subclass of Object
	class2.name == "Object"
	or
	{
		class1.superclass != null
		G |- class1.superclass <| class2
	}
	/* 
	{
		// variant non recursive
		val superClasses = new AuxiliaryFunctions().getSuperclasses(class1)
		superClasses.contains(class2)
	}
	*/
}

rule BasicEquals
	derives G |- BasicType left ~~ BasicType right
from {
	left.basic.equals(right.basic)
}

rule ClassEquals
	derives G |- ClassType left ~~ ClassType right
from {
	left.classref == right.classref
}

rule SubtypeSequence derives
	G |- Expression owner : List<Expression> expressions << List<TypedElement> typedElements
from {
	expressions.size == typedElements.size
	val typedElementsIterator = typedElements.iterator
	for (exp : expressions) {
		var Type expressionType
		G |- exp : expressionType
		var Type typedElementType
		G ||- typedElementsIterator.next : typedElementType
		G |- expressionType <: typedElementType
	}
}

rule Fields derives
	G ||- Class cl >> List<Field> fields
from {
	val superclasses = superclasses(cl)
	// so that upper classes come first
	Collections::reverse(superclasses)
	fields = newArrayList()
	for (superclass : superclasses)
		fields += EcoreUtil2::typeSelect(
			superclass.members,
			typeof(Field)
		)
	fields += EcoreUtil2::typeSelect(
		cl.members,
		typeof(Field)
	)
	or
	true // remember that Collections.add
	// returns false if the collection does not change
}

rule Methods derives
	G ||~ Class cl >> List<Method> methods
from {
	val result = new LinkedList<Method>()
	val allMethods = getAll(cl, 
		FjPackage::eINSTANCE.class_Members, 
		FjPackage::eINSTANCE.class_Superclass,
		typeof(Method)
	)
	allMethods.forEach [
		method |
		if (!result.exists [it.name == method.name])
			result.add(method)
	]
	methods = result
}

// a Constant is always OK
axiom CheckConstant
	G |- Constant _const

// a TypedElement is always OK
axiom CheckTypedElement
	G |- TypedElement typedElement

// a ParamRef is always OK
axiom CheckParamRef
	G |- ParamRef paramref

rule CheckThis
	G |- This _this
from {
	env(G, 'this', ClassType) != null
}

rule CheckMethod derives
	G |- Method method
from {
	val typeForThis = fjTypeUtils.createClassType(
		EcoreUtil2::getContainerOfType(method, typeof(Class))
	)
	var Type bodyType
	G, 'this' <- typeForThis |- method.body.expression : bodyType
	G |- bodyType <: method.type
	G, 'this' <- typeForThis |- method.body.expression
}

rule CheckNew derives
	G |- New newExp
from {
	var List<Field> fields
	G ||- newExp.type.classref >> fields
	G |- newExp : newExp.args << fields
	// check all subexpressions (arguments)
	newExp.args.forEach [ G |- it ]
}

rule CheckSelection derives
	G |- Selection selection
from {
	// check receiver
	G |- selection.receiver
	// check message if it's a method call
	val message = selection.message
	switch (message) {
		Method: { 
			G |- selection : selection.args << message.params
			// check all subexpressions (arguments)
			for (arg : selection.args) {
				G |- arg
			}
		}
	}
}

rule CheckCast
	G |- Cast cast
from {
	var Type expType
	G |- cast.expression : expType
	
	G |- cast.type <: expType
	or
	G |- expType <: cast.type
}

rule CheckClass
	G |- Class cl
from {
	if (cl.superclass != null) {
		var List<Class> superClasses
		superClasses = superclasses(cl)
		!superClasses.contains(cl)
		
		var List<Field> inheritedFields
		G ||- cl.superclass >> inheritedFields
		inheritedFields.forEach [
			inheritedField |
			for (field : EcoreUtil2::typeSelect(cl.members, typeof(Field))) {
				field.name != inheritedField.name
			}
		]
		
		var List<Method> inheritedMethods
		G ||~ cl.superclass >> inheritedMethods
		// check override predicate
		inheritedMethods.forEach [
			inheritedMethod |
			EcoreUtil2::typeSelect(cl.members, typeof(Method)).forEach [
				it.name != inheritedMethod.name
				or
				{
					G |- it.type ~~ inheritedMethod.type
					
					it.params.size == inheritedMethod.params.size
					val inheritedMethodParamsIt = inheritedMethod.params.iterator
					for (param : it.params) {
						G |- param.type ~~ inheritedMethodParamsIt.next.type
					}
				}
			]
		]
	}
}

checkrule CheckMain for
	Program program
from {
	program.main == null // nothing to check
	or
	empty |- program.main
}

checkrule CheckClassOk for
	Class clazz
from {
	empty |- clazz
}

checkrule CheckMethodBody for
	Method method
from {
}

checkrule CheckField for
	Field field
from {
}

checkrule CheckMethodOverride for
	Method method
from {

}

checkrule CheckClassHierachyNotCyclic for
	Class cl
from {

}


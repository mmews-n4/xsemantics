/*******************************************************************************
 * Copyright (c) 2013-2017 Lorenzo Bettini.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Lorenzo Bettini - Initial contribution and API
 *******************************************************************************/

import it.xsemantics.example.fj.fj.Class
import it.xsemantics.example.fj.fj.Expression
import it.xsemantics.example.fj.fj.Field
import it.xsemantics.example.fj.fj.Method
import it.xsemantics.example.fj.fj.Type
import java.util.List
import it.xsemantics.example.fj.typing.FjTypeSystem
import it.xsemantics.example.fj.fj.ClassType
import it.xsemantics.example.fj.fj.BasicType

/*
 * A version of the FJ system where caching is used.
 */
system it.xsemantics.example.fjcached.typing.FjCachedTypeSystem extends FjTypeSystem

copyright
"Copyright (c) 2013-2017 Lorenzo Bettini.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
  Lorenzo Bettini - Initial contribution and API"


auxiliary {
	override superclasses(Class cl) : List<Class> cached
	override fields(Class cl) : List<Field> cached
	override methods(Class cl) : List<Method> cached
}

judgments {
	subclass ||- Class left <: Class right cached
		error stringRep(left) + " is not a subclass of " + stringRep(right)
	override type |- Expression expression : output Type cached
		error "cannot type " + stringRep(expression)
		source expression
	override subtype |- Type left <: Type right cached {
		condition=(left instanceof BasicType && right instanceof BasicType)	
	}
	error stringRep(left) + " is not a subtype of " + stringRep(right)
//	override equalstype |- Type left ~~ Type right cached
//		error stringRep(left) + " is not the same type as " + stringRep(right)
}

override rule ClassSubtyping
	G |- ClassType left <: ClassType right
from {
	G ||- left.classref <: right.classref
}

rule Subclassing
	G ||- Class left <: Class right
from {
	left == right
	or
	right.name == "Object"
	or {
		superclasses(left).contains(right)
	}
}